name: CI-CD
on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # checkout in to the current repo to pull the code
      - uses: actions/checkout@v3  
      # Cache the dependencies
      - name: Cache Node Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          # will be used to retrieve the cache
          # if either os or any dependency changes then a new cache will be generated with new key 
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node- 
      # Specifying a certain node version
      - name: NodeJS Setup
        uses: actions/setup-node@v3
        with:
          node-version: '16.14.0'
      # Install dependencies
      - run: npm ci
      # Check code formatting
      - run: npm run lint:check
      # Run automated tests
      - run: |
          echo "Secret1=${{ secrets.MYSQL_HOST }}" >> $GITHUB_ENV
          echo "Secret2=${{ secrets.MYSQL_PORT }}" >> $GITHUB_ENV
          echo "Secret3=${{ secrets.MYSQL_DB }}" >> $GITHUB_ENV
          echo "Secret4=${{ secrets.MYSQL_USER }}" >> $GITHUB_ENV
          echo "Secret5=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
          npm run test -- --coverage
        env:
          CI: true
      - name: Log Secrets
        run: |
          echo "Secret 1: $SECRET1"
          echo "Secret 2: $SECRET2"
          echo "Secret 3: $SECRET3"
          echo "Secret 4: $SECRET4"
          echo "Secret 5: $SECRET5"
      # Upload code coverage to artifacts
      - name: Upload Test coverage
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: coverage
      # Upload code coverage to codecov
      - name: Upload coverage reports
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: npx codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  publish:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Cache the dependencies
      - name: Cache Node Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          # will be used to retrieve the cache
          # if either os or any dependency changes then a new cache will be generated with new key 
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node- 
      - name: NodeJS Setup
        uses: actions/setup-node@v3
        with:
          node-version: '16.14.0'
      - name: Install EB CLI
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip
          pip3 install awsebcli --upgrade
      - run: npm install
      - name: Build Folder for Publish
        run: npm run build
      - name: Build the Docker Image
        run: docker build -t ugeshmalempati5/shopsmart-staging:latest --target prod .
      - name: Login to Docker
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_UN }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASS }}
      - name: Publish the image to Docker Hub
        id: image_publish
        run: docker push ugeshmalempati5/shopsmart-staging
      - name: Run migrations
        id: migrations
        if: steps.image_publish.outcome == 'success'
        env:
          NODE_ENV: development
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: npx sequelize-cli db:migrate --env development
      - name: Deploy to EBS
        if: steps.migrations.outcome == 'success'
        run: |
          eb init -r eu-central-1 -p Docker shopsmart-int
          eb use Shopsmart-int-env
          eb deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}